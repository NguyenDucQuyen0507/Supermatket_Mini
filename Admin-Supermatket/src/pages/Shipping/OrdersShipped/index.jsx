import React from "react";
import { useUser } from "../../../hooks/useUser";
import { axiosClient } from "../../../libraries/axiosClient";
import {
  Button,
  Descriptions,
  Divider,
  Form,
  Input,
  Modal,
  Popconfirm,
  Select,
  Space,
  Table,
  message,
} from "antd";

import numeral from "numeral";
import moment from "moment";
import { API_URL } from "../../../constants/URLS";
const index = () => {
  const [orders, setOrders] = React.useState([]);
  const [refresh, setRefresh] = React.useState(0);
  const [selectedOrder, setSelectedOrder] = React.useState(null);
  const [editFormVisible, setEditFormVisible] = React.useState(false);
  const [selectedRecord, setSelectedRecord] = React.useState(null);
  const [employees, setEmployee] = React.useState([]);
  const { users } = useUser();
  React.useEffect(() => {
    let orderConfirmed = [];
    if (
      users.roles.some((user) => {
        return (
          user === "directors" ||
          user === "administrator" ||
          user === "managers" ||
          user === "shipper"
        );
      })
    ) {
      axiosClient
        .get("/orders")
        .then((response) => {
          response.data.map((order) => {
            if (order.status.includes("DELIVERY SUCCESS")) {
              orderConfirmed.push(order);
            }
          });
          setOrders(orderConfirmed);
        })
        .catch((err) => {
          console.log(err);
        });
    }
    console.log("Quy·ªÅn", orderConfirmed);
  }, [refresh]);

  React.useEffect(() => {
    axiosClient
      .get("/employees")
      .then((response) => {
        setEmployee(response.data);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);
  const renderStatus = (status) => {
    return (
      <div>
        {status && status === "WAITING CONFIRMATION ORDER"
          ? "ƒêang Ch·ªù X√°c Nh·∫≠n"
          : status === "CONFIRMED ORDER"
          ? "ƒê√£ X√°c Nh·∫≠n ƒê∆°n H√†ng"
          : status === "SHIPPING CONFIRMATION"
          ? "X√°c Nh·∫≠n V·∫≠n Chuy·ªÉn"
          : status === "DELIVERY IN PROGRESS"
          ? "ƒêang Giao H√†ng"
          : status === "DELIVERY SUCCESS"
          ? "Giao H√†ng Th√†nh C√¥ng"
          : status === "RECEIVED ORDER"
          ? "ƒê√£ Nh·∫≠n H√†ng"
          : "ƒê√£ H·ªßy ƒê∆°n H√†ng"}
      </div>
    );
  };
  const columnOrder = [
    {
      title: "Kh√°ch h√†ng",
      dataIndex: "fullName",
      key: "fullName",
      render: (text) => {
        return <p>{text}</p>;
      },
    },
    {
      title: "S·ªë ƒëi·ªán tho·∫°i",
      dataIndex: "phoneNumber",
      key: "phoneNumber",
      render: (text) => {
        return <p>{text}</p>;
      },
    },
    {
      title: "H√¨nh th·ª©c thanh to√°n",
      dataIndex: "paymentType",
      key: "paymentType",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: (text, record) => {
        return renderStatus(text);
      },
    },
    {
      title: "Nh√¢n vi√™n",
      dataIndex: "employee",
      key: "employee",
      render: (text, record) => {
        return <strong>{record.employee?.fullName}</strong>;
      },
    },
    {
      title: "T·ªïng ti·ªÅn",
      dataIndex: "total",
      key: "total",
      render: (text, record) => {
        const { orderDetails } = record;

        let total = 0;
        orderDetails.forEach((od) => {
          let sum = od.quantity * od.product.total;
          total = total + sum;
        });

        return <strong>{numeral(total).format("0,0$")}</strong>;
      },
    },
    {
      title: "H√¨nh ·∫£nh x√°c nh·∫≠n",
      dataIndex: "imageConfirm",
      key: "imageConfirm",
      render: (text, record) => {
        return (
          <div>
            {text && (
              <img
                className="max-w-[150px] w-[30%] min-w-[70px]"
                src={`${API_URL}${text}`}
                alt="image-confirm"
              />
            )}
          </div>
        );
      },
    },
    {
      title: "",
      key: "details",
      render: (text, record) => {
        return (
          <Button
            onClick={() => {
              setSelectedOrder(record);
            }}
          >
            Xem
          </Button>
        );
      },
    },
  ];

  const productColumns = [
    {
      title: "S·ªë l∆∞·ª£ng",
      dataIndex: "quantity",
      key: "quantity",
    },
    {
      title: "T√™n s·∫£n ph·∫©m",
      dataIndex: "product.name",
      key: "product.name",
      render: (text, record) => {
        return <strong>{record?.product?.name}</strong>;
      },
    },
    {
      title: "Gi√°",
      dataIndex: "product.price",
      key: "product.price",
      render: (text, record) => {
        return (
          <div style={{ textAlign: "right" }}>
            {numeral(
              record?.product?.discount
                ? record?.product?.total
                : record?.product?.price
            ).format("0,0$")}
          </div>
        );
      },
    },
    {
      title: "Gi·∫£m gi√°",
      dataIndex: "product.discount",
      key: "product.discount",
      render: (text, record) => {
        return (
          <div style={{ textAlign: "right" }}>
            {numeral(record?.product?.discount).format("0,0")}%
          </div>
        );
      },
    },
  ];
  // update form
  const [updateForm] = Form.useForm();
  const onUpdateFinish = (values) => {
    //1 khi nh·∫≠p form xong n√≥ s·∫Ω post l√™n c∆° s·ªü d·ªØ li·ªáu v√† render ra m√†n h√¨nh
    axiosClient
      .patch("/orders/" + selectedRecord._id, values)
      .then((response) => {
        message.success("C·∫≠p nh·∫≠t th√†nh c√¥ng");
        setRefresh((f) => f + 1); //2.4gi√° tr·ªã thay ƒë·ªïi th√¨ useEffect thay ƒë·ªïi
        updateForm.resetFields(); //reset l·∫°i form
        setEditFormVisible(false);
      })
      .catch((err) => {
        message.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i!!");
      });
    console.log("‚ù§Ô∏è", values);
  };

  const onUpdateFinishFailed = (errors) => {
    console.log("üôà", errors);
  };
  return (
    <>
      <h1 className="p-2 mb-5 text-xl">ƒê∆°n h√†ng ƒë√£ v·∫≠n chuy·ªÉn üéâ</h1>
      <Modal
        centered
        title="Chi ti·∫øt ƒë∆°n h√†ng"
        open={selectedOrder}
        onOk={() => {
          setSelectedOrder(null);
        }}
        onCancel={() => {
          setSelectedOrder(null);
        }}
        okText="Ti·∫øp t·ª•c"
        cancelText="ƒê√≥ng"
      >
        {selectedOrder && (
          <div>
            <Descriptions
              bordered
              column={1}
              labelStyle={{ fontWeight: "700" }}
            >
              <Descriptions.Item label="Tr·∫°ng th√°i">
                {renderStatus(selectedOrder.status)}
                {/* {selectedOrder.status} */}
              </Descriptions.Item>
              <Descriptions.Item label="Kh√°ch h√†ng">
                {selectedOrder.fullName}
              </Descriptions.Item>
              <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i">
                {selectedOrder.phoneNumber}
              </Descriptions.Item>
              <Descriptions.Item label="Ng√†y t·∫°o h√≥a ƒë∆°n">
                {/* {selectedOrder.createdDate} */}
                {moment(selectedOrder.createdDate).format("DD/MM/yyyy")}
              </Descriptions.Item>
              <Descriptions.Item label="Ng√†y giao">
                {/* {selectedOrder.shippedDate} */}
                {moment(selectedOrder.shippedDate).format("DD/MM/yyyy")}
              </Descriptions.Item>
              <Descriptions.Item label="ƒê·ªãa ch·ªâ giao h√†ng">
                {selectedOrder.shippingAddress}
              </Descriptions.Item>
              <Descriptions.Item label="Nh√¢n vi√™n">
                {selectedOrder.employee?.fullName}
              </Descriptions.Item>
            </Descriptions>
            <Divider />
            <Table
              rowKey="_id"
              dataSource={selectedOrder.orderDetails}
              columns={productColumns}
            />
          </div>
        )}
      </Modal>
      <Table rowKey={"_id"} dataSource={orders} columns={columnOrder} />

      {/*Update form  */}
      <Modal
        centered
        open={editFormVisible}
        title="C·∫≠p nh·∫≠t th√¥ng tin"
        onOk={() => {
          updateForm.submit();
        }}
        onCancel={() => {
          setEditFormVisible(false);
        }}
        okText="L∆∞u th√¥ng tin"
        cancelText="ƒê√≥ng"
      >
        <Form
          form={updateForm}
          name="update-form"
          labelCol={{ span: 10 }}
          wrapperCol={{ span: 16 }}
          initialValues={{ remember: true }}
          onFinish={onUpdateFinish}
          onFinishFailed={onUpdateFinishFailed}
          autoComplete="off"
        >
          <div className="w-[80%]">
            {/* Created Date */}
            <Form.Item
              hasFeedback
              className=""
              label="Ng√†y t·∫°o"
              name="createdDate"
              rules={[{ required: false }]}
            >
              <Input />
            </Form.Item>

            {/* Shipped Date */}
            <Form.Item
              hasFeedback
              className=""
              label="Ng√†y giao"
              name="shippedDate"
              rules={[
                { required: true, type: "Date", message: "Kh√¥ng ƒë·ªÉ tr·ªëng" },
                { type: "date", message: "Ng√†y kh√¥ng h·ª£p l·ªá" },
                {
                  validate: {
                    validator: function (value) {
                      if (!value) return true;
                      if (value < createDate) {
                        return false;
                      }
                      return true;
                    },
                    message: "Ng√†y giao ph·∫£i nh·ªè h∆°n ng√†y hi·ªán t·∫°i",
                  },
                },
              ]}
            >
              <Input value={Date.now()} />
            </Form.Item>

            {/* Status */}
            <Form.Item
              hasFeedback
              className=""
              label="Tr·∫°ng th√°i ƒë∆°n h√†ng"
              name="status"
              rules={[
                { required: true, message: "Kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng" },
                // {
                //   validator: (_, value) => {
                //     if (
                //       [
                //         "WAITING CONFIRMATION ORDER",
                //         "CONFIRMED ORDER",
                //         "SHIPPING CONFIRMATION",
                //         "DELIVERY IN PROGRESS",
                //         "DELIVERY SUCCESS",
                //         "RECEIVED ORDER",
                //         "CANCELED ORDER",
                //       ].includes(value)
                //     ) {
                //       return Promise.resolve();
                //     } else {
                //       return Promise.reject("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!");
                //     }
                //   },
                // },
              ]}
            >
              <Select
                options={[
                  {
                    value: "CONFIRMED ORDER",
                    label: "ƒê√£ X√°c Nh·∫≠n ƒê∆°n H√†ng",
                  },
                  {
                    value: "SHIPPING CONFIRMATION",
                    label: "X√°c Nh·∫≠n V·∫≠n Chuy·ªÉn",
                  },
                ]}
              />
            </Form.Item>

            {/* Description */}
            <Form.Item
              hasFeedback
              className=""
              label="M√¥ t·∫£"
              name="description"
            >
              <Input />
            </Form.Item>

            {/* Shipping Address */}
            <Form.Item
              hasFeedback
              className=""
              label="ƒê·ªãa ch·ªâ giao h√†ng"
              name="shippingAddress"
              rules={[{ required: true, message: "Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng!" }]}
            >
              <Input />
            </Form.Item>

            {/* Payment Type */}
            <Form.Item
              hasFeedback
              className=""
              label="H√¨nh th·ª©c thanh to√°n"
              name="paymentType"
              rules={[{ required: true, message: "Kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng" }]}
            >
              <Select
                options={[
                  {
                    value: "MOMO",
                    label: "MOMO",
                  },
                  {
                    value: "CASH",
                    label: "Thanh To√°n B·∫±ng Ti·ªÅn M·∫∑t",
                  },
                ]}
              />
            </Form.Item>

            {/* Customer */}
            <Form.Item
              className=""
              label="Kh√°ch h√†ng"
              name="fullName"
              rules={[{ required: true, message: "Please selected customer!" }]}
            >
              <Input />
            </Form.Item>
            {/* PhoneNumber */}
            <Form.Item
              className=""
              label="S·ªë ƒëi·ªán tho·∫°i"
              name="phoneNumber"
              rules={[{ required: true, message: "Please selected customer!" }]}
            >
              <Input />
            </Form.Item>
            {/* Employee */}
            <Form.Item
              disabled={true}
              label="Nh√¢n vi√™n"
              name="employeeId"
              rules={[{ required: true, message: "Please selected empoyees!" }]}
            >
              <Select
                options={
                  employees &&
                  employees.map((employee) => {
                    return {
                      value: employee._id,
                      label: employee.fullName,
                    };
                  })
                }
              />
            </Form.Item>
          </div>
        </Form>
      </Modal>
    </>
  );
};

export default index;
